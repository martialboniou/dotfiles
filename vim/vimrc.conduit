"" Vimrc by mars for Vim 8.0+; better with Yarn
"
" Language: Vim
" Maintainer: Martial
" Creator: Martial
" Version: 0.8
" Goal: embeds FZF if found
"       maintained for compatibility reason (switch to nvim)
"       TODO: restore parsers/auto-completion tools
"
" hondana@gmx.com (2004-2010,2012-2013,2015,2020-2023)
"

""""""""""""""""
" BASIC BEHAVIOR
""""""""""""""""

set hidden
set nobackup
set noswapfile
set mouse=a
set isfname+=32 "valid filename w/ space

let g:mapleader="\<Space>"
let g:maplocalleader="," "less pinky than - on Dvorak

nnoremap ; :

set path=.,** " search in file's dir then current subdir
au BufEnter * :cd %:p:h "current dir is file dir (so path != .,,**)
if &t_Co > 2 || has("gui_running") | syntax on | endif
if v:version >= 703
  " Inspiration RelativeNumberCurrentWindow script by Ingo Karkat
  au VimEnter,WinEnter,BufWinEnter,FocusGained,InsertLeave * :set rnu | :set nu
  au WinLeave,FocusLost,InsertEnter * :set rnu! | :set nu!
endif
set sts=2 ts=2 sw=2 et
set laststatus=2
set winminheight=0

set nocompatible
filetype off

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'

"""""""""
" PLUGINS
"""""""""

if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" styl
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/seoul256.vim'
Plug 'tomasr/molokai'
Plug 'luochen1990/rainbow'
"something for indent? see coc

" navi
Plug 'majutsushi/tagbar'
Plug 'yegappan/mru'
Plug 'mbbill/undotree'
if executable('fzf')
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
endif
if executable('lf')
  Plug 'ptzz/lf.vim' | Plug 'voldikss/vim-floaterm'
endif

" form
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'

" tool
Plug 'liuchengxu/vim-which-key'
Plug 'tpope/vim-fugitive'

" lang
" TODO: coc
" - markdown
Plug 'godlygeek/tabular' | Plug 'plasticboy/vim-markdown'
if executable('yarn')
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
else
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
endif
" - zig
Plug 'ziglang/zig.vim'

call plug#end()

""""""""""""""" 
" GENERIC SETUP
"""""""""""""""

" THEME
if &t_Co>=256 || has("gui_running")
  try
    au VimEnter * :colo molokai
  catch /^Vim\%((\a\+)\)\=:E185/
    "no way
  endtry
endif
" alternative theme
"colo seoul256-light
"set background=dark

" RAINBOW PARENTHESES IMPROVED
let g:rainbow_active=1

" VIM SURROUND
"examples:
"  - cs'"  : change ' to " inside a single-quoted expression
"  - cst"  : change a tagged expression to a double-quoted version
"  - ds"   : delete the quotes
"  - ysiw] : add some brackets around a inner word (iw)
"  - yss)  : wrap the entire line in parentheses

" EASY ALIGN
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
"examples around '=':
"  vipga= : visual inner paragraph
"  gaip=  : start alignment for inner paragraph

" VIM WHICH KEY
set timeoutlen=500
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :WhichKey ','<CR>

" VIM FUGITIVE
map <leader>gb :Git blame<CR>
map <leader>gs :Git status<CR>
map <leader>gd :Git diff<CR>
map <leader>gl :Git log<CR>
map <leader>gc :Git commit<CR>

" MOST RECENT USED (MRU)
nmap <leader>o :MRU<CR>
nmap <leader>r :bro<leader>ol!<CR>

" FUZZY FINDER (FZF)
if executable('fzf')
  " - options
  let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
  " - colors
  let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }
  " - actions
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-b': 'split',
    \ 'ctrl-v': 'vsplit',
    \ 'ctrl-y': {lines -> setreg('*', join(lines, "\n"))}}
  " - mapping selecting mappings
  nmap <leader><tab> <plug>(fzf-maps-n)
  xmap <leader><tab> <plug>(fzf-maps-x)
  omap <leader><tab> <plug>(fzf-maps-o)
  " - insert mode completion
  "   - C-X C-F => file
  "   - C-X C-L => line
  "   - C-X C-K => word
  imap <c-x><c-k> <plug>(fzf-complete-word)
  imap <c-x><c-f> <plug>(fzf-complete-path)
  imap <c-x><c-l> <plug>(fzf-complete-line)
  " - FZF ❤️  MRU
  nmap <leader>o :FZFMru<CR>
  " - other
  nnoremap <silent> <leader>' :Marks<CR>
  nnoremap <silent> <leader>b :Buffers<CR>
  nnoremap <silent> <leader>f :Files<CR>
  nnoremap <silent> <leader>/ :BLines<CR>
  nnoremap <silent> <leader>g :Commits<CR>
  nnoremap <silent> <leader>H :Helptags<CR>
  nnoremap <silent> <leader>hh :History<CR>
  nnoremap <silent> <leader>h: :History:<CR>
  nnoremap <silent> <leader>h/ :History/<CR>
  if executable('rg')
    nnoremap <silent> <leader>f :Rg<CR>
  endif
endif

" LIST FILES (AKA LF)
if executable('lf')
  let g:lf_replace_netrw = 1
  " REMINDER: use zh to toggle hidden files in LF
  let g:lf_command_override = 'lf -command "set hidden"'
endif


"""""""""""""""""""""" 
" FILE-DEPENDENT SETUP
""""""""""""""""""""""

" MARKDOWN
"run with :MarkdownPreview/:MarkdownPreviewStop

"plasticboy/vim-markdown
autocmd FileType markdown let b:sleuth_automatic=0 "TODO: vim-sleuth is worth it?
autocmd FileType markdown set conceallevel=0
autocmd FileType markdown normal zR

let g:vim_markdown_frontmatter=1

"iamcco/markdown-preview.nvim
let g:mkdp_refresh_slow=1
let g:mkdp_markdown_css=$HOME.'/.scrubs/share/css/github-markdown.css' " TODO: link to Dots

" ZIG
let g:zig_fmt_autosave = 0
