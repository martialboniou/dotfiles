#!/usr/bin/env bash
#
# source & author: github.com/holman/dotfiles
# bootstrap installs things
#
# note: symlink files are symlinked but conduit files aren't on Windows
#       to use non-cygwin programs

DOTFILES_ROOT="`pwd`"

set -e

echo ''

SYSTEM=$(echo "`uname 2>/dev/null`" | head -c 5)
# MINGW/MSYS case too
CYGWIN=1 && MINGW=1 && if [[ "$SYSTEM" == "Cygwi" ]]; then CYGWIN=0; elif [[ "$SYSTEM" == "MINGW" ]]; then MINGW=0; fi

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.conduit ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.conduit.example > git/gitconfig.conduit

    success 'gitconfig'
  fi
}

link_files () {
  if [[ $CYGWIN -eq 0 || $MINGW -eq 0 ]]; then
    if [[ "${1##*.}" == "conduit" ]]; then
      cp -R $1 $2
      success "copied $1 to $2"
    elif [[ $CYGWIN -eq 0 ]]; then
      ln -s $1 $2
      success "linked $1 to $2"
    else
      info "Cannot symlink $1 on this system\n"
    fi
  else
    ln -s $1 $2
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink -o -name \*.conduit`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

echo ''
echo '  All installed!'

# Last Modified: Wed 25 Dec 2013 21:02:47 CET
